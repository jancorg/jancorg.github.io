<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | I left my leg in Jaglan Beta]]></title>
  <link href="http://jancorg.github.io/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://jancorg.github.io/"/>
  <updated>2015-01-05T23:50:30+01:00</updated>
  <id>http://jancorg.github.io/</id>
  <author>
    <name><![CDATA[jancorg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LibContainer Overview]]></title>
    <link href="http://jancorg.github.io/blog/2015/01/03/libcontainer-overview/"/>
    <updated>2015-01-03T18:14:14+01:00</updated>
    <id>http://jancorg.github.io/blog/2015/01/03/libcontainer-overview</id>
    <content type="html"><![CDATA[<p>Libcontainer is now the default docker execution environment. It is driver (named native) and a library.</p>

<p>Or in other words, it is a replacement (since version 0.9) for formerly LXC execution environment (that can be easily brought back using <code>-e</code> switch).</p>

<p>This library is developed by docker.io, written in go and C/C++, in order to support a wider range of isolation technologies. It also can be used in python through python bindings.</p>

<p><img src="http://blog.docker.com/wp-content/uploads/2014/03/docker-execdriver-diagram.png" alt="docker execdriver" /></p>

<p>It is meant to be a cross-system abstraction layer being an attempt to standarize the way apps are packed up, delivered, and run in isolation.</p>

<p>Libcontainer as a stand alone project, makes possible to other game players to adopting it. Google, parallels (openvz), redhat, ubuntu (lxc). are also contributing to this project.</p>

<p><img src="http://1.bp.blogspot.com/-sxNaakTEBlg/U6Bbtglx00I/AAAAAAAAAcw/xgreTVZP4F4/s1600/libcontainer+intro.png" alt="libcontainer_place" /></p>

<p>This way, container features available in linux kernel API are provided as a unique library in a consistent way. LibContainer addresses the problem of having an unique kernel API and several implementations. (call them, LXC, libvirt, lmctfy, &hellip;)</p>

<blockquote><p>Libcontainer enables containers to work with Linux namespaces, control groups, capabilities, AppArmor, security profiles, network interfaces and firewalling rules in a consistent and predictable way.</p></blockquote>

<p>Currently, docker can support these kernel features out-of-the-box, since it no longer depends on LXC.</p>

<p>It introduces a new container specification as we can see <a href="https://github.com/docker/libcontainer/blob/4940cee052ece5a8b2ea477699e7bb232de1e1f8/SPEC.md">here</a></p>

<blockquote><p> It includes namespaces, standard filesystem setup, a default Linux capability set, and information about resource reservations. It also has information about any populated environment settings for the processes running inside a container.</p></blockquote>

<p>Let`s see a little example of how it was replaced on docker code.</p>

<p><code>nsinit</code> and <code>nsenter</code> are the user-land tools that now are needed in order to replace <code>lxc-*</code> user-land tools.
<code>nsinit</code> is part of libcontainer package and it is meant to load a <a href="https://github.com/docker/libcontainer/blob/master/sample_configs/minimal.json">config json file</a>. It replaces <code>lxc-start</code>.</p>

<p><code>nsenter</code> replaces <code>lxc-attach</code> and it is not part of libcontainer package, but it is part of <code>util-linux</code> <a href="https://www.kernel.org/pub/linux/utils/util-linux/">package</a>.</p>

<p>When formerly we ran <code>docker run ...</code>, (by default) it called <code>lxc-start</code> to run the container.</p>

<pre><code class="go lxc-start https://github.com/docker/docker/blob/17cacf3326edde6d177e12132f74fc0174bda1d2/daemon/execdriver/lxc/driver.go">    params := []string{
        "lxc-start",
        "-n", c.ID,
        "-f", configPath,
    }
</code></pre>

<p>Currently, native execdriver is called.</p>

<pre><code class="go native_exec_driver https://github.com/docker/docker/blob/17cacf3326edde6d177e12132f74fc0174bda1d2/daemon/execdriver/native/driver.go">func (d *driver) Run(c *execdriver.Command, pipes *execdriver.Pipes, startCallback execdriver.StartCallback) (execdriver.ExitStatus, error) {
    // take the Command and populate the libcontainer.Config from it
    container, err := d.createContainer(c)
</code></pre>

<pre><code class="go native_syscalls https://github.com/docker/libcontainer/blob/1597c68f7b941fd97881155d7f077852e2914e7b/namespaces/utils.go">var namespaceInfo = map[libcontainer.NamespaceType]int{
    libcontainer.NEWNET:  syscall.CLONE_NEWNET,
    libcontainer.NEWNS:   syscall.CLONE_NEWNS,
    libcontainer.NEWUSER: syscall.CLONE_NEWUSER,
    libcontainer.NEWIPC:  syscall.CLONE_NEWIPC,
    libcontainer.NEWUTS:  syscall.CLONE_NEWUTS,
    libcontainer.NEWPID:  syscall.CLONE_NEWPID,
}
</code></pre>

<p>General go syscalls can be found <a href="http://golang.org/pkg/syscall/">here.</a>. These ones used above are Linux especific.</p>

<p>Master Libcontainer branch supports right now <a href="https://github.com/docker/docker/tree/master/daemon/execdriver">lxc and native</a> execdrivers. Hence it means that it can only used in linux for now.</p>

<pre><code class="go supported_exec_drivers https://github.com/docker/docker/blob/master/daemon/execdriver/execdrivers/execdrivers.go">package execdrivers

import (
...
    "github.com/docker/docker/daemon/execdriver/lxc"
    "github.com/docker/docker/daemon/execdriver/native"
...
)
</code></pre>

<p>Other systems, like FreeBSD, implements &lsquo;containers&rsquo; using Jails. It is an older concept, and some people note that it could not be as sofisticated as linux one is.</p>

<p><a href="https://github.com/kzys/docker/commit/f8c4d49fda9eb7e35c88532c174fa8dca9d831ba">Here</a> is as an example of an execution driver in development for FreeBSD Jails. Well, it is an execution driver for FreeBSD, therefore not using libcontainer.</p>

<p>Unfortunately, FreeBSD (and others flavours) mention on docker &amp; libcontainer are only for go language.</p>

<p>A full list of OS level virtualization implementations can be found  on <a href="http://en.wikipedia.org/wiki/Operating_system%E2%80%93level_virtualization#Implementations">wikipedia</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hubot: A Bot for Automating Daily Tasks or Anything Else]]></title>
    <link href="http://jancorg.github.io/blog/2015/01/02/hubot-a-bot-for-automating-daily-tasks-or-anything-else/"/>
    <updated>2015-01-02T19:23:50+01:00</updated>
    <id>http://jancorg.github.io/blog/2015/01/02/hubot-a-bot-for-automating-daily-tasks-or-anything-else</id>
    <content type="html"><![CDATA[<blockquote><p>Hubot is your company&rsquo;s robot. Install him in your company to dramatically improve and reduce employee efficiency.</p></blockquote>

<p>In other words, <a href="https://hubot.github.com/">hubot</a> is a chat bot crafted by github team that can run custom written scritps. This allow us to automatize any kind of tasks like merging branchs, deploying releases, do monitoring queries, inform (it listen on a port), etc. It has a lot of adapters (where it reads from and writes to), even shell, so we can enjoy its company almost everywhere.</p>

<p>It is written in <a href="http://coffeescript.org/">coffescript</a> and ran with nodejs.</p>

<h2>Hubot setup</h2>

<p>In order to ease this process, we are going to setup and deploy it with docker. Following Dockerfile allowed me to run and test Hubot.</p>

<pre><code class="text hubot_dockerfile https://gist.github.com/jancorg/2d14912f35f756b97912/">FROM dockerfile/nodejs
MAINTAINER  Marvin

WORKDIR /root
RUN npm install -g yo generator-hubot

RUN useradd -ms /bin/bash marvin
ENV HOME /home/marvin
# variables needed by hubot scripts 
ADD env-vars.sh /home/marvin/.profile
RUN chown marvin /home/marvin/.profile

USER marvin
WORDIR /home/marvin
RUN echo n | yo hubot --defaults
RUN npm installÂº hubot-slack hubot-scripts githubot --save

# enable plugins
RUN echo [ \'github-merge.coffee\' ] &gt; hubot-scripts.json

CMD ["/home/marvin/bin/hubot", "--name", "marvin"]

EXPOSE 8080
</code></pre>

<p>Build an image with <code>docker build -t cname/hubot .</code> or just use the commands for testing it. Nodejs setup instructions can be found on <a href="https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager">joyent&rsquo;s nodejs repo</a></p>

<p>This also installs <a href="https://github.com/slackhq/hubot-slack">slack adapter</a>, <a href="https://github.com/github/hubot-scripts">hubot-scripts</a> and <a href="https://github.com/iangreenleaf/githubot">githubot</a> npm packages, hence you can figure out how next steps will be.</p>

<p>Let me introduce you to Marvin, my hubot instance, named like Hitchhicker&rsquo;s guide to galaxy assistant robot.</p>

<pre><code class="text ">                     _____________________________  
                    /                             \ 
   //\              |      Extracting input for    |
  ////\    _____    |   self-replication process   |
 //////\  /_____\   \                             / 
 ======= |[^_/\_]|   /----------------------------  
  |   | _|___@@__|__                                
  +===+/  ///     \_\                               
   | |_\ /// HUBOT/\\                             
   |___/\//      /  \\                            
         \      /   +---+                            
          \____/    |   |                            
           | //|    +===+                            
            \//      |xx|                            

marvin&gt; marvin: the rules
1. A robot may not injure a human being or, through inaction, allow a human being to come to harm.
2. A robot must obey any orders given to it by human beings, except where such orders would conflict with the First Law.
3. A robot must protect its own existence as long as such protection does not conflict with the First or Second Law.
</code></pre>

<p><a href="https://github.com/github/janky">Janky</a> is a hithub project that implements CI on top Jenkins and Hubot. Chatops term is used to refer chat based deployments and monitoring.</p>

<h2>Github integration</h2>

<p>One of the things I found interesting using hubot for is easy merging and deploy process.
In this article I am just going to treat merging as as example, but concepts shown here could be easily used for integrating it with jenkins or any other tools.</p>

<p>We can find some git related scripts under scripts folder in <a href="https://github.com/github/hubot-scripts">hubot-scripts</a> github project.
This time I have tested <a href="https://github.com/github/hubot-scripts/blob/master/src/scripts/github-merge.coffee">github-merge.coffee</a> plugin. It uses <a href="https://github.com/iangreenleaf/githubot">githubot</a> project for github API access.</p>

<p>We need to set some variables in order this to work. They are made available to hubot as environment variables, so you can set them on <code>env-vars.sh</code> script mentioned in Dockerfile.</p>

<pre><code class="sh ">export HUBOT_GITHUB_TOKEN=$token
export HUBOT_GITHUB_API_VERSION=$api_version
export HUBOT_GITHUB_USER=$gh_user
export HUBOT_GITHUB_API=$gh_url
export HUBOT_CONCURRENT_REQUESTS=$req_limit
</code></pre>

<p>Enabling a plugin is as easy as adding it to <code>hubot-scripts.json</code> or <code>external-scripts.json</code>.
<code>json
[ 'github-merge.coffee' ]
</code></p>

<p>Once configured we can check if plugin was loaded sucessfuly and works properly.
<code>text
marvin&gt; marvin help
[...]
marvin merge project_name/&lt;head&gt; into &lt;base&gt; - merges the selected branches or SHA commits
[...]
marvin&gt; marvin merge nevermind/PXTRM-test-switch-bug into develop
marvin&gt; Merge PXTRM-test-switch-bug into develop
marvin&gt; marvin merge nevermind/PXTRM-merge-conflict-on-purpose into develop
marvin&gt; [Fri Jan 02 2015 17:03:46 GMT+0000 (UTC)] ERROR 409 Merge conflict
</code></p>

<p><img src="/images/2015-01-02-hubot/hubot_merged_branch.png" alt="hubot_merged_branch" /></p>

<p>It seems to work, and since it is using <a href="https://developer.github.com/v3/repos/merging/">github merge API</a> we are not messing any branch up.</p>

<h2>Slack integration</h2>

<p>I have chosen slack as default adapter since it is chat tool we are using at office. Hubots default one is <a href="https://github.com/github/hubot/tree/master/src/adapters">campfire</a>.</p>

<p>An organization, if you already don&rsquo;t have one, needs to be created on slack. You can do it on sign up process.
When this is done, just configure integrations and look for hubot there. You will get a token and even you can set a custom avatar for you shinny bot.
Make this token availabe as environment varaible, and&hellip; that&rsquo;s it.
<code>sh
export HUBOT_SLACK_TOKEN=$slack_token
</code></p>

<p>Both processes are really straighforward.</p>

<p>Let&rsquo;s see the results.</p>

<p><img src="/images/2015-01-02-hubot/hubot_joins_channel.png" alt="joins_channel" /></p>

<p><img src="/images/2015-01-02-hubot/hubot_merge_and_plugin_example.png" alt="hubot_merge_and_plugin_example" /></p>

<p>Enjoy your bot!</p>
]]></content>
  </entry>
  
</feed>
