<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Devops | I left my leg in Jaglan Beta]]></title>
  <link href="http://jancorg.github.io/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://jancorg.github.io/"/>
  <updated>2015-01-02T22:33:58+01:00</updated>
  <id>http://jancorg.github.io/</id>
  <author>
    <name><![CDATA[jancorg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hubot: A Bot for Automating Daily Tasks or Anything Else]]></title>
    <link href="http://jancorg.github.io/blog/2015/01/02/hubot-a-bot-for-automating-daily-tasks-or-anything-else/"/>
    <updated>2015-01-02T19:23:50+01:00</updated>
    <id>http://jancorg.github.io/blog/2015/01/02/hubot-a-bot-for-automating-daily-tasks-or-anything-else</id>
    <content type="html"><![CDATA[<blockquote><p>Hubot is your company&rsquo;s robot. Install him in your company to dramatically improve and reduce employee efficiency.</p></blockquote>

<p>In other words, <a href="https://hubot.github.com/">hubot</a> is a chat bot crafted by github team that can run custom written scritps. This allow us to automatize any kind of tasks like merging branchs, deploying releases, inform (it listen on a port), etc. It has a lot of adapters (where it reads from and writes to), even shell, so we can enjoy it company&rsquo;s almost everywhere.</p>

<p>It is written in <a href="http://coffeescript.org/">coffescript</a> and ran with nodejs.</p>

<h2>Hubot setup</h2>

<p>To ease this process, we are going to setup and deploy it with docker. Following Dockerfile allowed me to run and test Hubot.</p>

<pre><code class="text hubot_dockerfile https://gist.github.com/jancorg/2d14912f35f756b97912/">FROM dockerfile/nodejs
MAINTAINER  Marvin

WORKDIR /root
RUN npm install -g yo generator-hubot

RUN useradd -ms /bin/bash marvin
ENV HOME /home/marvin
# variables needed by hubot scripts 
ADD env-vars.sh /home/marvin/.profile
RUN choown marvin /home/marvin/.profile

USER marvin
WORDIR /home/marvin
RUN echo n | yo hubot --defaults
RUN npm install hubot-slack hubot-scripts githubot --save

# enable plugins
RUN echo [ \'github-merge.coffee\' ] &gt; hubot-scripts.json

CMD ["/home/marvin/bin/hubot", "--name", "marvin"]

EXPOSE 8080
</code></pre>

<p>Build an image with docker or just use the commands for testing it. Nodejs setup instructions can be found on <a href="https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager">joyent&rsquo;s nodejs repo</a></p>

<p>This also installs <a href="https://github.com/slackhq/hubot-slack">slack adapter</a> and <a href="https://github.com/github/hubot-scripts">hubot-scripts</a> and <a href="https://github.com/iangreenleaf/githubot">githubot</a> npm packages, so you can figure out how next steps will be.</p>

<p>Let me introduce you to Marvin, my hubot instance, named like Hitchhicker&rsquo;s guide to galaxy assistant robot.</p>

<pre><code class="text ">                    _____________________________  
                    /                             \ 
   //\              |      Extracting input for    |
  ////\    _____    |   self-replication process   |
 //////\  /_____\   \                             / 
 ======= |[^_/\_]|   /----------------------------  
  |   | _|___@@__|__                                
  +===+/  ///     \_\                               
   | |_\ /// HUBOT/\\                             
   |___/\//      /  \\                            
         \      /   +---+                            
          \____/    |   |                            
           | //|    +===+                            
            \//      |xx|                            

marvin&gt; marvin: the rules
1. A robot may not injure a human being or, through inaction, allow a human being to come to harm.
2. A robot must obey any orders given to it by human beings, except where such orders would conflict with the First Law.
3. A robot must protect its own existence as long as such protection does not conflict with the First or Second Law.
</code></pre>

<p><a href="https://github.com/github/janky">Janky</a> is a hibhub project than implements CI on top Jenkins and Hubot. Chatops term used to refer chat based deployments and monitoring.</p>

<h2>Github integration</h2>

<p>Of the things I found interesting using hubot for is ease merging and deploy process.
In this article I am just going to treat merging as as example, but concepts shown here could be easily used for integrate it with jenkins or any other tools.</p>

<p>We can find some git related scripts under scripts folder in <a href="https://github.com/github/hubot-scripts">hubot-scripts</a> github project.
This time I have tested <a href="https://github.com/github/hubot-scripts/blob/master/src/scripts/github-merge.coffee">github-merge.coffee</a> plugin. It uses <a href="https://github.com/iangreenleaf/githubot">githubot</a> project for github API access.</p>

<p>We need to set some variables in orther this to work. They are made available to hubot as environment variables, so you can set them on <code>env-vars.sh</code> script mentioned in Dockerfile.</p>

<pre><code class="sh ">export HUBOT_GITHUB_TOKEN=$token
export HUBOT_GITHUB_API_VERSION=$api_version
export HUBOT_GITHUB_USER=$gh_user
export HUBOT_GITHUB_API=$gh_url
export HUBOT_CONCURRENT_REQUESTS=$req_limit
</code></pre>

<p>Enabling a plugin is as easy as adding it to <code>hubot-scripts.json</code> or <code>external-scripts.json</code>.
<code>json
[ 'github-merge.coffee' ]
</code></p>

<p>Once configured we can check if plugin was loaded sucessfuly and works properly.
<code>text
marvin&gt; marvin help
[...]
marvin merge project_name/&lt;head&gt; into &lt;base&gt; - merges the selected branches or SHA commits
[...]
marvin&gt; marvin merge nevermind/PXTRM-test-switch-bug into develop
marvin&gt; Merge PXTRM-test-switch-bug into develop
marvin&gt; marvin merge nevermind/PXTRM-merge-conflict-on-purpose into develop
marvin&gt; [Fri Jan 02 2015 17:03:46 GMT+0000 (UTC)] ERROR 409 Merge conflict
</code></p>

<p><img src="images/2015-01-02-hubot/hubot_merged_branch.png" alt="hubot_merged_branch" /></p>

<p>It seems to work, and since it is using <a href="https://developer.github.com/v3/repos/merging/">github merge API</a> we are not messing any branch up.</p>

<h2>Slack integration</h2>

<p>I have chosen slack as default adapter since it is chat tool we are using at office. However default one is <a href="https://github.com/github/hubot/tree/master/src/adapters">campfire</a>.</p>

<p>An organization, if you already don&rsquo;t have one, needs to be created on slack. You can do it on sign up process.
When this is done, just configure integrations and look for hubot there. You will get a token and even you can set a custom avatar for you shinny bot.
Make this token availabe as environment varaible, and&hellip; that&rsquo;s it.
<code>sh
export HUBOT_SLACK_TOKEN=$slack_token
</code></p>

<p>Both processes are really straighforward.</p>

<p>Let&rsquo;s see the results.</p>

<p><img src="images/2015-01-02-hubot/hubot_joins_channel.png" alt="joins_channel" /></p>

<p><img src="images/2015-01-02-hubot/hubot_merge_and_plugin_example.png" alt="hubot_merge_and_plugin_example" /></p>

<p>Enjoy your bot!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Kernel Capabilities]]></title>
    <link href="http://jancorg.github.io/blog/2015/01/01/linux-kernel-capabilities/"/>
    <updated>2015-01-01T20:57:16+01:00</updated>
    <id>http://jancorg.github.io/blog/2015/01/01/linux-kernel-capabilities</id>
    <content type="html"><![CDATA[<p>Capabilities were created as an alternative to classical two level privilege system: root and user. They split a root acoount into their privileges. This way, linux kernel allows a process to perform certain root tipical tasks without giving a process full root privileges.</p>

<p>A process (or better, a thread as the smaller unit a capability can be assigned to) can be granted with a given capability. Each capability is independent from each other.</p>

<p>For instance, a user process with just <code>CAP_NET_BIND_SERVICE</code> capability can open ports bellow 1024, however it can not kill any process or use chroot.</p>

<p>All linux kernel capabilities <a href="http://linux.die.net/man/7/capabilities">list</a> can be found on man pages.</p>

<p>Instead of checking effective UID of user, modern kernels checks for capabilities, so they allow the privileged operation if capability bit is set in the effective set.</p>

<pre><code class="c init_process_privileges https://github.com/torvalds/linux/blob/9a3c4145af32125c5ee39c0272662b47307a8323/kernel/cred.c">struct cred init_cred = {
    .usage                  = ATOMIC_INIT(4),
#ifdef CONFIG_DEBUG_CREDENTIALS
    .subscribers            = ATOMIC_INIT(2),
    .magic                  = CRED_MAGIC,
#endif
    .uid                    = GLOBAL_ROOT_UID,
    .gid                    = GLOBAL_ROOT_GID,
    .suid                   = GLOBAL_ROOT_UID,
    .sgid                   = GLOBAL_ROOT_GID,
    .euid                   = GLOBAL_ROOT_UID,
    .egid                   = GLOBAL_ROOT_GID,
    .fsuid                  = GLOBAL_ROOT_UID,
    .fsgid                  = GLOBAL_ROOT_GID,
    .securebits             = SECUREBITS_DEFAULT,
    .cap_inheritable        = CAP_EMPTY_SET,
    .cap_permitted          = CAP_FULL_SET,
    .cap_effective          = CAP_FULL_SET,
    .cap_bset               = CAP_FULL_SET,
    .user                   = INIT_USER,
    .user_ns                = &amp;init_user_ns,
    .group_info             = &amp;init_groups,
};
} kernel_cap_t;
</code></pre>

<p><a href="https://github.com/torvalds/linux/blob/9a3c4145af32125c5ee39c0272662b47307a8323/include/uapi/linux/capability.h">linux capabilities</a></p>

<p>There are four sets of capabilities:
effective: capabilities that a process is allowed.
permitted: capabilities that a process is permited. This allows to enable, disable or drop capabilities.
inheritable: capabilities that a process can give to another process called, for instance, by calling <code>exec()</code> system call.
bounding set: Limit from capabilities can not be grown. They just can be dropped.</p>

<p>Credentials, therefore, are mostly a set of uids/guis, management flags, capabilities, namaspaces and cgroups.</p>

<p>As formerly happened with UID, GID and mode, capabilities are also part of VFS. They are called File Capabilities. They are store in <code>f_cred</code> struct.</p>

<pre><code class="c file_struct https://github.com/torvalds/linux/blob/603ba7e41bf5d405aba22294af5d075d8898176d/include/linux/fs.h">struct file {
    union {
        struct llist_node   fu_llist;
        struct rcu_head     fu_rcuhead;
    } f_u;
    struct path                     f_path;
    struct inode                    *f_inode;   /* cached value */
    const struct file_operations    *f_op;

    /*
     * Protects f_ep_links, f_flags.
     * Must not be taken from IRQ context.
     */
    spinlock_t              f_lock;
    atomic_long_t           f_count;
    unsigned int            f_flags;
    fmode_t                 f_mode;
    struct mutex            f_pos_lock;
    loff_t                  f_pos;
    struct fown_struct      f_owner;
    const struct cred       *f_cred;
    struct file_ra_state    f_ra;

    u64                     f_version;
#ifdef CONFIG_SECURITY
    void                    *f_security;
#endif
    /* needed for tty driver, and maybe others */
    void                    *private_data;

#ifdef CONFIG_EPOLL
    /* Used by fs/eventpoll.c to link all the hooks to this file */
    struct list_head        f_ep_links;
    struct list_head        f_tfile_llink;
#endif /* #ifdef CONFIG_EPOLL */
    struct address_space    *f_mapping;
} __attribute__((aligned(4)));  /* lest something weird decides that 2 is OK */
</code></pre>

<p>This way, we can, for example ping some host on the internet using <code>CAP_NET_RAW</code> capability.</p>

<p>Following is an example of setting a capability in command line interface.</p>

<pre><code class="sh setting_beep_capabilities"># setcap cap_dac_override,cap_sys_tty_config+ep /usr/bin/beep
</code></pre>
]]></content>
  </entry>
  
</feed>
