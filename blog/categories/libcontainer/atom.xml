<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Libcontainer | I left my leg in Jaglan Beta]]></title>
  <link href="http://jancorg.github.io/blog/categories/libcontainer/atom.xml" rel="self"/>
  <link href="http://jancorg.github.io/"/>
  <updated>2015-01-06T02:53:59+01:00</updated>
  <id>http://jancorg.github.io/</id>
  <author>
    <name><![CDATA[jancorg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LibContainer Overview]]></title>
    <link href="http://jancorg.github.io/blog/2015/01/03/libcontainer-overview/"/>
    <updated>2015-01-03T18:14:14+01:00</updated>
    <id>http://jancorg.github.io/blog/2015/01/03/libcontainer-overview</id>
    <content type="html"><![CDATA[<p>Libcontainer is now the default docker execution environment. It is driver (named native) and a library.</p>

<p>In other words, it is a replacement (since version 0.9) for formerly LXC execution environment (that can be easily brought back using <code>-e</code> switch).</p>

<p>This library is developed by docker.io, written in go and C/C++, in order to support a wider range of isolation technologies. It also can be used in python through python bindings.</p>

<p><img src="http://blog.docker.com/wp-content/uploads/2014/03/docker-execdriver-diagram.png" alt="docker execdriver" /></p>

<p>It is meant to be a cross-system abstraction layer being an attempt to standarize the way apps are packed up, delivered, and run in isolation.</p>

<p>Libcontainer as a stand alone project, makes possible to other game players adopting it. Google, parallels (openvz), redhat, ubuntu (lxc) are also contributing to this project.</p>

<p><img src="http://1.bp.blogspot.com/-sxNaakTEBlg/U6Bbtglx00I/AAAAAAAAAcw/xgreTVZP4F4/s1600/libcontainer+intro.png" alt="libcontainer_place" /></p>

<p>This way, container features available in linux kernel API are provided as a unique library in a consistent way. LibContainer addresses the problem of having an unique kernel API and several implementations. (call them, LXC, libvirt, lmctfy, &hellip;)</p>

<blockquote><p>Libcontainer enables containers to work with Linux namespaces, control groups, capabilities, AppArmor, security profiles, network interfaces and firewalling rules in a consistent and predictable way.</p></blockquote>

<p>Currently, docker can support these kernel features out-of-the-box, since it no longer depends on LXC.</p>

<p>It introduces a new container specification as we can see <a href="https://github.com/docker/libcontainer/blob/4940cee052ece5a8b2ea477699e7bb232de1e1f8/SPEC.md">here</a></p>

<blockquote><p> It includes namespaces, standard filesystem setup, a default Linux capability set, and information about resource reservations. It also has information about any populated environment settings for the processes running inside a container.</p></blockquote>

<p>Let`s see a little example of how it was replaced on docker code.</p>

<p><code>nsinit</code> and <code>nsenter</code> are the user-land tools that now are needed in order to replace <code>lxc-*</code> user-land tools.
<code>nsinit</code> is part of libcontainer package and it is meant to load a <a href="https://github.com/docker/libcontainer/blob/master/sample_configs/minimal.json">config json file</a>. It replaces <code>lxc-start</code>.</p>

<p><code>nsenter</code> replaces <code>lxc-attach</code> and it is not part of libcontainer package, but it is part of <code>util-linux</code> <a href="https://www.kernel.org/pub/linux/utils/util-linux/">package</a>.</p>

<p>When formerly we ran <code>docker run ...</code>, (by default) it called <code>lxc-start</code> to run the container.</p>

<pre><code class="go lxc-start https://github.com/docker/docker/blob/17cacf3326edde6d177e12132f74fc0174bda1d2/daemon/execdriver/lxc/driver.go">    params := []string{
        "lxc-start",
        "-n", c.ID,
        "-f", configPath,
    }
</code></pre>

<p>Currently, native execdriver is called.</p>

<pre><code class="go native_exec_driver https://github.com/docker/docker/blob/17cacf3326edde6d177e12132f74fc0174bda1d2/daemon/execdriver/native/driver.go">func (d *driver) Run(c *execdriver.Command, pipes *execdriver.Pipes, startCallback execdriver.StartCallback) (execdriver.ExitStatus, error) {
    // take the Command and populate the libcontainer.Config from it
    container, err := d.createContainer(c)
</code></pre>

<pre><code class="go native_syscalls https://github.com/docker/libcontainer/blob/1597c68f7b941fd97881155d7f077852e2914e7b/namespaces/utils.go">var namespaceInfo = map[libcontainer.NamespaceType]int{
    libcontainer.NEWNET:  syscall.CLONE_NEWNET,
    libcontainer.NEWNS:   syscall.CLONE_NEWNS,
    libcontainer.NEWUSER: syscall.CLONE_NEWUSER,
    libcontainer.NEWIPC:  syscall.CLONE_NEWIPC,
    libcontainer.NEWUTS:  syscall.CLONE_NEWUTS,
    libcontainer.NEWPID:  syscall.CLONE_NEWPID,
}
</code></pre>

<p>General go syscalls can be found <a href="http://golang.org/pkg/syscall/">here.</a>. These ones used above are Linux especific.</p>

<p>Master Libcontainer branch supports right now <a href="https://github.com/docker/docker/tree/master/daemon/execdriver">lxc and native</a> execdrivers. Hence it means that it can only used in linux for now.</p>

<pre><code class="go supported_exec_drivers https://github.com/docker/docker/blob/master/daemon/execdriver/execdrivers/execdrivers.go">package execdrivers

import (
...
    "github.com/docker/docker/daemon/execdriver/lxc"
    "github.com/docker/docker/daemon/execdriver/native"
...
)
</code></pre>

<p>Other systems, like FreeBSD, implements &lsquo;containers&rsquo; using Jails. It is an older concept, and some people note that it could not be as sofisticated as linux one is.</p>

<p><a href="https://github.com/kzys/docker/commit/f8c4d49fda9eb7e35c88532c174fa8dca9d831ba">Here</a> is as an example of an execution driver in development for FreeBSD Jails. Well, it is an execution driver for FreeBSD, therefore not using libcontainer.</p>

<p>Unfortunately, FreeBSD (and others flavours) mention on docker &amp; libcontainer are only for go language.</p>

<p>A full list of OS level virtualization implementations can be found  on <a href="http://en.wikipedia.org/wiki/Operating_system%E2%80%93level_virtualization#Implementations">wikipedia</a>.</p>
]]></content>
  </entry>
  
</feed>
